'use strict';

let https = require('https');
let querystring = require('querystring');
let config = require(__dirname + '/config.json');
let path = '/bot' + config.token + '/sendMessage?';
let options = {
    hostname: 'api.telegram.org',
    port: '443',
    method: 'POST'
};

module.exports = {
    /**
     * –ï—Å–ª–∏ –Ω–∞–º –ø—Ä–∏—Å—ã–ª–∞—é—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã ‚Äî –º—ã —Å—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
     * –ò–Ω–∞—á–µ –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
     */
    handleMessage: function (req, data) {
        let messageText = data.message.text;
        let chatId = data.message.chat.id;

        console.log('Got request at: ' + new Date() + '\n', data);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        req.db.collection('users').findOneAndUpdate({ id: chatId }, {$set: {lastMessage: messageText}});

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        if (messageText === '/start') {
            let text = '–ë–æ—Ç –æ–±–Ω–æ–≤–ª—è–µ—Ç –∫—É—Ä—Å—ã –¥–æ–ª–ª–∞—Ä–∞ –∏ –µ–≤—Ä–æ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É.';
            text += '–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –±–∏—Ä–∂–µ–≤–æ–π –∫—É—Ä—Å, –∞ —Ç–∞–∫–∂–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –ø–æ –∏–∑–º–µ–Ω–µ–Ω–∏—é –∫—É—Ä—Å–∞.';

            this.sendMessage(chatId, text);
        } else if (messageText === '/settings') {
            this.handleSettings(chatId, req.db);
        } else if (messageText === '/get' || messageText === 'üíµ') {
            this.sendRate(chatId, req.db);
        } else {
            // –ö–æ–º–∞–Ω–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã ‚Äî –ø–æ–∏—Å–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
            this.handleNoCommand(chatId, messageText, req.db);
        }
    },

    sendMessage: function (chatId, text, replyMarkup) {
        replyMarkup = replyMarkup || JSON.stringify({
            keyboard: [['üíµ']],
            resize_keyboard: true
        });

        options.path = path + querystring.stringify({
            chat_id: chatId,
            text: text,
            reply_markup: replyMarkup,
            parse_mode: 'Markdown'
        });

        request = https.request (options, function (res) {
            res.on('data', function (resData) {
                console.log('Got answer at: ' + new Date() + '\n', JSON.parse(resData.toString()));
            });
        });

        request.on('error', function (e) {
            console.log('Problem with request at: ' + new Date() + '\n', e.message);
        });

        request.end();
    },

    /**
     * –í—ã–≤–æ–¥–∏–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏, –≤–µ–¥—É—â–∏–º–∏ –∫–æ –≤—Å–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏
     */
    handleSettings: function (chatId, db) {
        var that = this;

        db.collection('users').find({id: chatId}).toArray(function (err, users) {
            if (err) { throw err; }

            let notifications = false;
            let sendChanges = false;
            let replyMarkup = JSON.stringify({
                keyboard: [['–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏—è'], ['–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–∞–∑–Ω–∏—Ü—É –∫—É—Ä—Å–∞']],
                resize_keyboard: true
            });
            let text = '–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n' + '–û–ø–æ–≤–µ—â–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫—É—Ä—Å–∞: ';

            // TODO: —É–±—Ä–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–æ—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            if (users && users.length) {
                notifications = users[0].notifications;
                sendChanges = users[0].sendChanges;
            } else {
                db.collection('users').insertOne({
                    id: chatId,
                    notifications: notifications,
                    sendChanges: sendChanges
                });
            }

            if (sendChanges) {
                text += '*–í–∫–ª—é—á–µ–Ω—ã* \n';
                text += '–†–∞–∑–Ω–∏—Ü–∞ –∫—É—Ä—Å–∞ –¥–ª—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è: *1 —Ä—É–±.*';
            } else {
                text += '*–í—ã–∫–ª—é—á–µ–Ω—ã*';
            }

            that.sendMessage(chatId, text, replyMarkup);
        });
    },

    /**
     * –†–∞–∑–±–∏—Ä–∞–µ–º—Å—è —Å –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç–æ–º, –ø—Ä–∏—Å–ª—ã–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (–≤–æ–∑–º–æ–∂–Ω–æ —ç—Ç–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏)
     */
    handleNoCommand: function(chatId, messageText, db) {
        // TODO
    },

    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—É—Ä—Å –≤–∞–ª—é—Ç
     */
    sendRate: function (chatId, db) {
        let that = this;
        let text,
        let lastSend = {};

        db.collection('rates').find().toArray(function (err, collection) {
            if (err) { throw err; }

            text = collection.map(function (rate) {
                let result = (Math.round(rate.rate * 100) / 100).toString();

                if (result.length === 4) {
                    result = result + '0';
                }

                lastSend[rate.title] = rate.rate;

                return rate.title + ': ' + result + ' —Ä—É–±';
            }).join('\n');

            // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –∫—É—Ä—Å—ã
            db.collection('users').find({id: chatId}).toArray(function (err, users) {
                if (err) { throw err; }

                if (users && users.length) {
                    db.collection('users').update({ id: chatId }, { $set: {lastSend: lastSend} });
                }
            });

            that.sendMessage(chatId, text);
        });
    }
};
