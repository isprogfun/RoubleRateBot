const https = require('https');

const querystring = require('querystring');

const config = require('./config.json');

const path = `/bot${config.token}/sendMessage?`;
const options = {
    hostname: 'api.telegram.org',
    port: '443',
    method: 'POST',
};

module.exports = {
    /**
     * –ï—Å–ª–∏ –Ω–∞–º –ø—Ä–∏—Å—ã–ª–∞—é—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã ‚Äî –º—ã —Å—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
     * –ò–Ω–∞—á–µ –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
     */
    handleMessage(req, db, data) {
        const that = this;
        const messageText = data.message.text;
        const chatId = data.message.chat.id;

        console.log(`${(new Date()).toISOString()}: Got request\n`, data);

        if (messageText === '/start') {
            const text =
                '–ë–æ—Ç –æ–±–Ω–æ–≤–ª—è–µ—Ç –∫—É—Ä—Å—ã –¥–æ–ª–ª–∞—Ä–∞ –∏ –µ–≤—Ä–æ —Ä–∞–∑ –≤ 5 –º–∏–Ω—É—Ç, –∏—Å–ø–æ–ª—å–∑—É—è –¥–∞–Ω–Ω—ã–µ –ú–ú–í–ë.\n' +
                '–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n' +
                '/get ‚Äî –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –±–∏—Ä–∂–µ–≤–æ–π –∫—É—Ä—Å\n' +
                '/settings ‚Äî –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –ø–æ –∏–∑–º–µ–Ω–µ–Ω–∏—é –∫—É—Ä—Å–∞\n' +
                '/stop ‚Äî –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –æ–ø–æ–≤–µ—â–µ–Ω–∏–π';

            this.sendMessage(chatId, text);
        } else if (messageText === '/settings') {
            this.handleSettings(chatId, db, data);
        } else if (messageText === '/stop') {
            this.updateUser(chatId, db, { sendChanges: false });
            this.sendMessage(chatId, '–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –æ–ø–æ–≤–µ—â–µ–Ω–∏–π');
        } else if (messageText === '/get' || messageText === 'üíµ') {
            this.sendRate(chatId, db);
        } else {
            // –ö–æ–º–∞–Ω–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã ‚Äî –ø–æ–∏—Å–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
            db.collection('users').findOne({ id: chatId }, (err, user) => {
                if (err) { throw err; }

                if (messageText === '–í—ã–∫–ª—é—á–∏—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏—è') {
                    that.updateUser(chatId, db, { sendChanges: false });
                    that.handleSettings(chatId, db);
                } else if (messageText === '–í–∫–ª—é—á–∏—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏—è') {
                    that.updateUser(chatId, db, { sendChanges: true });
                    that.handleSettings(chatId, db);
                } else if (messageText === '–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–∞–∑–Ω–∏—Ü—É –∫—É—Ä—Å–∞') {
                    const text = '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ä–∞–∑–Ω–∏—Ü—ã –∫—É—Ä—Å–∞ (–æ—Ç 0.01 –¥–æ 10)';

                    that.updateUser(chatId, db, { lastMessage: messageText });
                    that.sendMessage(chatId, text, JSON.stringify({
                        keyboard: [['–í—ã–π—Ç–∏']],
                        resize_keyboard: true,
                    }));
                } else if (user.lastMessage === '–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–∞–∑–Ω–∏—Ü—É –∫—É—Ä—Å–∞' && messageText === '–í—ã–π—Ç–∏') {
                    that.updateUser(chatId, db, { lastMessage: '' });
                    that.handleSettings(chatId, db);
                } else if (user.lastMessage === '–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–∞–∑–Ω–∏—Ü—É –∫—É—Ä—Å–∞') {
                    const difference = parseFloat(messageText);

                    if (difference && difference >= 0.01 && difference <= 10) {
                        that.updateUser(chatId, db, {
                            difference,
                            lastMessage: '',
                        });
                        that.handleSettings(chatId, db);
                    }
                } else if (messageText === '–í—ã–π—Ç–∏') {
                    that.sendMessage(chatId, '–í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫');
                }
            });
        }
    },

    /**
     * –í—ã–≤–æ–¥–∏–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏,
     * –≤–µ–¥—É—â–∏–º–∏ –∫–æ –≤—Å–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏
     */
    handleSettings(chatId, db, data) {
        const that = this;

        db.collection('users').findOne({ id: chatId }, (err, user) => {
            if (err) { throw err; }

            const sendChanges = (user && user.sendChanges) || false;
            const replyMarkup = { resize_keyboard: true };
            let text = '–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n–û–ø–æ–≤–µ—â–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫—É—Ä—Å–∞: ';

            if (!user) {
                db.collection('users').insertOne({
                    id: chatId,
                    name: `${data.message.chat.first_name} ${data.message.chat.last_name || ''}`,
                    sendChanges,
                    difference: 1,
                });
            }

            if (sendChanges) {
                const difference = user.difference || 1;

                text += `*–í–∫–ª—é—á–µ–Ω—ã*\n–†–∞–∑–Ω–∏—Ü–∞ –∫—É—Ä—Å–∞ –¥–ª—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è: *${difference} —Ä—É–±.*`;
                replyMarkup.keyboard = [
                    ['–í—ã–∫–ª—é—á–∏—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏—è'],
                    ['–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–∞–∑–Ω–∏—Ü—É –∫—É—Ä—Å–∞'],
                    ['–í—ã–π—Ç–∏'],
                ];
            } else {
                text += '*–í—ã–∫–ª—é—á–µ–Ω—ã*';
                replyMarkup.keyboard = [
                    ['–í–∫–ª—é—á–∏—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏—è'],
                    ['–í—ã–π—Ç–∏'],
                ];
            }

            that.sendMessage(chatId, text, JSON.stringify(replyMarkup));
        });
    },

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
     */
    sendMessage(chatId, text, _replyMarkup) {
        const replyMarkup = _replyMarkup || JSON.stringify({
            keyboard: [['üíµ']],
            resize_keyboard: true,
        });

        options.path = path + querystring.stringify({
            chat_id: chatId,
            text,
            reply_markup: replyMarkup,
            parse_mode: 'Markdown',
        });

        const request = https.request(options, (res) => {
            res.on('data', (resData) => {
                console.log(`${(new Date()).toISOString()}: Got answer\n`, JSON.parse(resData.toString()));
            });
        });

        request.on('error', (err) => {
            console.log(`${(new Date()).toISOString()}: Problem with request\n`, err);
        });

        request.end();
    },

    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—É—Ä—Å –≤–∞–ª—é—Ç
     */
    sendRate(chatId, db) {
        const that = this;

        db.collection('rates').find().toArray((err, collection) => {
            if (err) { throw err; }

            db.collection('users').findOne({ id: chatId }, (err, user) => {
                if (err) { throw err; }

                const lastSend = (user && user.lastSend) || {};

                // –°–Ω–∞—á–∞–ª–∞ –¥–æ–ª–ª–∞—Ä
                collection.sort((rate) => {
                    if (rate.title === 'USD') {
                        return -1;
                    }

                    return 1;
                });

                const text = collection.map((rate) => {
                    let result = `${rate.title}: ${rate.rate} —Ä—É–±`;
                    let difference;

                    if (lastSend && Object.keys(lastSend).length) {
                        difference = Number(rate.rate - lastSend[rate.title]).toFixed(2);
                    }

                    if (difference && difference > 0) {
                        result += ` _(+${difference} —Ä—É–±)_`;
                    } else if (difference && Number(difference) !== 0 && (Number(difference)).toString() !== 'NaN') {
                        result += ` _(${difference} —Ä—É–±)_`;
                    }

                    lastSend[rate.title] = rate.rate;

                    return result;
                }).join('\n');

                // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –∫—É—Ä—Å—ã
                that.updateUser(chatId, db, { lastSend });
                that.sendMessage(chatId, text);
            });
        });
    },

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    updateUser(chatId, db, data) {
        const that = this;

        if (data && Object.keys(data).length) {
            db.collection('users').findOneAndUpdate({
                id: chatId,
            }, {
                $set: data,
            }, (err) => {
                if (err) { throw err; }

                if (typeof data.sendChanges === 'boolean') {
                    that.notifyAdmin(db, data.sendChanges);
                }
            });
        }
    },

    /**
     * –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏/–æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –æ—Ç –æ–ø–æ–≤–µ—â–µ–Ω–∏–π
     * –∏ –∫–æ–ª-–≤–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
     */
    notifyAdmin(db, sendChanges) {
        const that = this;
        let text = sendChanges ? '+1' : '-1';

        db.collection('users').find({
            sendChanges: true,
        }).toArray((err, collection) => {
            if (err) { throw err; }

            text = `–ö–æ–ª-–≤–æ –æ–ø–æ–≤–µ—â–∞–µ–º—ã—Ö: ${text} (${collection && collection.length})`;

            that.sendMessage(config.adminId, text);
        });
    },
};
